#
# Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

include JdkNativeCompilation.gmk

ORIGIN_ARG := $(call SET_EXECUTABLE_ORIGIN,/../lib/jli)

# Applications expect to be able to link against libjawt without invoking
# System.loadLibrary("jawt") first. This was the behaviour described in the
# devloper documentation of JAWT and what worked with OpenJDK6.
ifneq ($(findstring $(OPENJDK_TARGET_OS), linux solaris), )
  ORIGIN_ARG += $(call SET_EXECUTABLE_ORIGIN,/../lib)
endif

# Tell the compiler not to export any functions unless declared so in
# the source code. On Windows, this is the default and cannot be changed.
# On Mac, we have always exported all symbols, probably due to oversight
# and/or misunderstanding. To emulate this, don't hide any symbols
# by default.
# On AIX/xlc we need at least xlc 13.1 for the symbol hiding (see JDK-8214063)
# Also provide an override for non-conformant libraries.
ifeq ($(TOOLCHAIN_TYPE), gcc)
  LAUNCHER_CFLAGS += -fvisibility=hidden
  LDFLAGS_JDKEXE += -Wl,--exclude-libs,ALL
else ifeq ($(TOOLCHAIN_TYPE), clang)
  ifneq ($(OPENJDK_TARGET_OS), macosx)
    LAUNCHER_CFLAGS += -fvisibility=hidden
  endif
else ifeq ($(TOOLCHAIN_TYPE), solstudio)
  LAUNCHER_CFLAGS += -xldscope=hidden
endif

LAUNCHER_SRC := $(TOPDIR)/src/java.base/share/native/launcher
LAUNCHER_CFLAGS += -I$(TOPDIR)/src/java.base/share/native/launcher \
    -I$(TOPDIR)/src/java.base/share/native/libjli \
    -I$(TOPDIR)/src/java.base/$(OPENJDK_TARGET_OS_TYPE)/native/libjli \
    -I$(TOPDIR)/src/java.base/$(OPENJDK_TARGET_OS)/native/libjli \
    #
GLOBAL_VERSION_INFO_RESOURCE := $(TOPDIR)/src/java.base/windows/native/common/version.rc
JAVA_VERSION_INFO_RESOURCE := $(TOPDIR)/src/java.base/windows/native/launcher/java.rc
MACOSX_PLIST_DIR := $(TOPDIR)/src/java.base/macosx/native/launcher
JAVA_MANIFEST := $(TOPDIR)/src/java.base/windows/native/launcher/java.manifest

################################################################################
# Build standard launcher.

# Setup make rules for building a standard launcher.
#
# Parameter 1 is the name of the rule. This name is used as variable prefix,
# and the targets generated are listed in a variable by that name. It is also
# used as the name of the executable.
#
# Remaining parameters are named arguments. These include:
# MAIN_MODULE  The module of the main class to launch if different from the
#     current module
# MAIN_CLASS   The Java main class to launch
# JAVA_ARGS   Processed into a -DJAVA_ARGS and added to CFLAGS
# EXTRA_JAVA_ARGS Processed into a -DEXTRA_JAVA_ARGS and is prepended
#     before JAVA_ARGS to CFLAGS, primarily to allow long string literal
#     compile time defines exceeding Visual Studio 2013 limitations.
# CFLAGS   Additional CFLAGS
# CFLAGS_windows   Additional CFLAGS_windows
# LIBS_unix   Additional LIBS_unix
# LIBS_windows   Additional LIBS_windows
# LDFLAGS_solaris Additional LDFLAGS_solaris
# RC_FLAGS   Additional RC_FLAGS
# MACOSX_SIGNED   On macosx, sign this binary
# OPTIMIZATION   Override default optimization level (LOW)
# OUTPUT_DIR   Override default output directory
# VERSION_INFO_RESOURCE   Override default Windows resource file
SetupBuildLauncher = $(NamedParamsMacroTemplate)
define SetupBuildLauncherBody
  # Setup default values (unless overridden)
  ifeq ($$($1_OPTIMIZATION), )
    $1_OPTIMIZATION := LOW
  endif

  ifeq ($$($1_MAIN_MODULE), )
    $1_MAIN_MODULE := $(MODULE)
  endif

  $1_JAVA_ARGS += -ms8m
  ifneq ($$($1_MAIN_CLASS), )
    $1_LAUNCHER_CLASS := -m $$($1_MAIN_MODULE)/$$($1_MAIN_CLASS)
  endif

  ifneq ($$($1_EXTRA_JAVA_ARGS), )
    $1_EXTRA_JAVA_ARGS_STR := '{ $$(strip $$(foreach a, \
      $$(addprefix -J, $$($1_EXTRA_JAVA_ARGS)), "$$a"$(COMMA) )) }'
    $1_CFLAGS += -DEXTRA_JAVA_ARGS=$$($1_EXTRA_JAVA_ARGS_STR)
  endif
  $1_JAVA_ARGS_STR := '{ $$(strip $$(foreach a, \
      $$(addprefix -J, $$($1_JAVA_ARGS)) $$($1_LAUNCHER_CLASS), "$$a"$(COMMA) )) }'
  $1_CFLAGS += -DJAVA_ARGS=$$($1_JAVA_ARGS_STR)

  $1_LIBS :=
  ifeq ($(OPENJDK_TARGET_OS), macosx)
    ifeq ($$($1_MACOSX_SIGNED), true)
      $1_PLIST_FILE := Info-privileged.plist
        $1_CODESIGN := true
    else
      $1_PLIST_FILE := Info-cmdline.plist
    endif

    $1_CFLAGS += -DPACKAGE_PATH='"$(PACKAGE_PATH)"'
    $1_LDFLAGS += -Wl,-all_load \
        -sectcreate __TEXT __info_plist $(MACOSX_PLIST_DIR)/$$($1_PLIST_FILE)
    ifeq ($(STATIC_BUILD), true)
      $1_LDFLAGS += -exported_symbols_list \
              $(SUPPORT_OUTPUTDIR)/build-static/exported.symbols
      $1_LIBS += \
          $$(shell $(FIND) $(SUPPORT_OUTPUTDIR)/modules_libs/java.base -name "*.a") \
          $(SUPPORT_OUTPUTDIR)/modules_libs/jdk.jdwp.agent/libdt_socket.a \
          $(SUPPORT_OUTPUTDIR)/modules_libs/jdk.jdwp.agent/libjdwp.a \
          $(SUPPORT_OUTPUTDIR)/native/java.base/$(LIBRARY_PREFIX)fdlibm$(STATIC_LIBRARY_SUFFIX) \
          -framework CoreFoundation \
          -framework Foundation \
          -framework SystemConfiguration \
          -lstdc++ -liconv
    endif
    $1_LIBS += -framework Cocoa -framework Security \
        -framework ApplicationServices
  endif

  ifeq ($(OPENJDK_TARGET_OS), aix)
    $1_LDFLAGS += -L$(SUPPORT_OUTPUTDIR)/native/java.base
    $1_LIBS += -ljli_static
  endif

  ifeq ($(USE_EXTERNAL_LIBZ), true)
    $1_LIBS += -lz
  endif

  $1_WINDOWS_JLI_LIB := $(SUPPORT_OUTPUTDIR)/native/java.base/libjli/jli.lib

  $$(eval $$(call SetupJdkExecutable, BUILD_LAUNCHER_$1, \
      NAME := $1, \
      EXTRA_FILES := $(LAUNCHER_SRC)/main.c, \
      OPTIMIZATION := $$($1_OPTIMIZATION), \
      CFLAGS := $$(CFLAGS_JDKEXE) $$($1_CFLAGS) \
          $(LAUNCHER_CFLAGS) \
          $(VERSION_CFLAGS) \
          -DLAUNCHER_NAME='"$(LAUNCHER_NAME)"' \
          -DPROGNAME='"$1"' \
          $$($1_CFLAGS), \
      CFLAGS_linux := -fPIC, \
      CFLAGS_solaris := -KPIC -DHAVE_GETHRTIME, \
      CFLAGS_windows := $$($1_CFLAGS_windows), \
      LDFLAGS := $$(LDFLAGS_JDKEXE) \
          $$(ORIGIN_ARG) \
          $$($1_LDFLAGS), \
      LDFLAGS_linux := \
          -L$(call FindLibDirForModule, java.base)/jli, \
      LDFLAGS_macosx := \
          -L$(call FindLibDirForModule, java.base)/jli, \
      LDFLAGS_solaris := $$($1_LDFLAGS_solaris) \
          -L$(call FindLibDirForModule, java.base)/jli, \
      LIBS := $(JDKEXE_LIBS) $$($1_LIBS), \
      LIBS_unix := $$($1_LIBS_unix), \
      LIBS_linux := -lpthread -ljli $(LIBDL), \
      LIBS_macosx := -ljli, \
      LIBS_solaris := -ljli -lthread $(LIBDL), \
      LIBS_windows := $$($1_WINDOWS_JLI_LIB) \
          $(SUPPORT_OUTPUTDIR)/native/java.base/libjava/java.lib advapi32.lib \
          $$($1_LIBS_windows), \
      OUTPUT_DIR := $$($1_OUTPUT_DIR), \
      VERSIONINFO_RESOURCE := $$($1_VERSION_INFO_RESOURCE), \
      EXTRA_RC_FLAGS := $$($1_EXTRA_RC_FLAGS), \
      MANIFEST := $(JAVA_MANIFEST), \
      MANIFEST_VERSION := $(VERSION_NUMBER_FOUR_POSITIONS), \
      CODESIGN := $$($1_CODESIGN), \
  ))

  $1 += $$(BUILD_LAUNCHER_$1)
  TARGETS += $$($1)

  ifeq ($(OPENJDK_TARGET_OS), aix)
    $$(BUILD_LAUNCHER_$1): $(SUPPORT_OUTPUTDIR)/native/java.base/libjli_static.a
  endif

  ifeq ($(OPENJDK_TARGET_OS), windows)
    $$(BUILD_LAUNCHER_$1): $(SUPPORT_OUTPUTDIR)/native/java.base/libjava/java.lib \
        $$($1_WINDOWS_JLI_LIB)
  endif
endef
