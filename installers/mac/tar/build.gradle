/*
* Copyright (c) 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation. Amazon designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*/

dependencies {
    compile project(path: ':openjdksrc', configuration: 'archives')
}

def imageDir= "${buildRoot}/src/build/macosx-x86_64-normal-server-release/images"
def jdkResultingImage = "${imageDir}/jdk-bundle"
def testResultingImage = "${imageDir}/test"
def correttoMacDir = 'amazon-corretto-11.jdk'

/**
 * Create a local copy of the source tree in our
 * build root -- this is required since OpenJDK's
 * build wants to occur inside the source tree,
 * and we don't want to tamper with someone
 * else's tree.
 */
task copySource(type: Copy) {
    dependsOn project.configurations.compile
    from tarTree(project.configurations.compile.singleFile)
    into buildRoot
}

task configureBuild(type: Exec) {
    dependsOn copySource
    workingDir "$buildRoot/src"
    def commands = ['bash', 'configure',
                    '--with-jvm-features=zgc',
                    '--with-version-opt=LTS',
                    "--with-version-build=${version.build}",
                    "--with-vendor-version-string=Corretto-${version.full}",
                    '--with-version-pre=',
                    '--with-vendor-name=Amazon.com Inc.',
                    '--with-vendor-url=https://aws.amazon.com/corretto/',
                    "--with-vendor-bug-url=https://github.com/corretto/corretto-${version.major}/issues/",
                    '--with-debug-level=release',
                    '--with-native-debug-symbols=none']
    def extraCmd = System.getenv("EXTRA_CORRETTO_CONFIG_OPTIONS")
    if (extraCmd != null) {
        commands += extraCmd.split(" ")
    }
    commandLine commands.flatten()
}

task executeBuild {
    dependsOn configureBuild
    def workspace = "$buildRoot/src"
    doLast {
        // Build image
        exec {
            workingDir workspace
            commandLine 'make', 'images'
        }
        // Build tests
        exec {
            workingDir workspace
            commandLine 'make','test-image-hotspot-jtreg-native','test-image-jdk-jtreg-native','test-image-hotspot-gtest'
        }
    }
}

task importAmazonCacerts(type: Exec) {
    dependsOn executeBuild
    workingDir "${jdkResultingImage}/jdk-${version.major}.${version.minor}.${version.security}.jdk/Contents/Home/"
    // Default password for JSSE key store
    def keystore_password = "changeit"
    commandLine 'keytool', '-importkeystore', '-noprompt',
            '-srckeystore', "${buildRoot}/amazon-cacerts",
            '-srcstorepass', keystore_password,
            '-destkeystore', 'lib/security/cacerts',
            '-deststorepass', keystore_password
}

task renameBuildArtifacts {
    dependsOn importAmazonCacerts
    doLast {
        file("${jdkResultingImage}/jdk-${version.major}.${version.minor}.${version.security}.jdk").
                renameTo(file("${jdkResultingImage}/${correttoMacDir}"))
    }
}

task inflatePlistTemplate(type: Copy) {
    dependsOn renameBuildArtifacts
    from('templates/Info.plist.template') {
        rename { file -> file.replace('.template', '') }
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: project.version)
    }
    into "${jdkResultingImage}/${correttoMacDir}/Contents"
}

task prepareArtifacts {
    dependsOn inflatePlistTemplate
    doLast {
        if(file("${buildDir}/${correttoMacDir}").exists()) {
            delete "${buildDir}/${correttoMacDir}"
        }
        copy {
            from("${jdkResultingImage}/${correttoMacDir}") {
                include "Contents/Home/bin/**"
                include "Contents/Home/conf/**"
                include "Contents/Home/include/**"
                include "Contents/Home/jmods/**"
                include "Contents/Home/legal/**"
                include "Contents/Home/lib/**"
                include "Contents/Home/man/man1/**"
                include "Contents/Home/release"
                include "Contents/Info.plist"
                include "Contents/MacOS/**"
            }
            into "${buildDir}/${correttoMacDir}"
        }
        // Set the directory as bundle
        exec {
            commandLine "SetFile", "-a", "B", "${buildDir}/${correttoMacDir}"
        }
        // Gradle does not preserve symlink, fix it before packaging
        exec {
            workingDir "${buildDir}/${correttoMacDir}/Contents"
            commandLine "ln", "-sf", "../Home/lib/jli/libjli.dylib", "MacOS/libjli.dylib"
        }
    }
}

task packaging(type: Exec) {
    dependsOn prepareArtifacts
    def tarDir = "${distributionDir}/amazon-corretto-${project.version.full}-macosx-x64.tar.gz"
    workingDir buildDir
    commandLine "tar", "czf", tarDir, correttoMacDir
    outputs.file tarDir
}

task packageTestResults(type: Tar) {
    dependsOn executeBuild
    def archive = "amazon-corretto-testimage-${project.version.full}-macosx-x64"
    description 'Package test results'
    archiveName "${archive}.tar.gz"
    compression Compression.GZIP
    from(testResultingImage) {
        include '**'
    }
    into archive

}

artifacts {
    archives file: packaging.outputs.getFiles().getSingleFile(), builtBy: packaging
    archives packageTestResults
}