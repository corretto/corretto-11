/*
* Copyright (c) 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation. Amazon designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*/

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id 'com.bmuschko.docker-remote-api' version '4.3.0'
}

dependencies {
    compile project(path: ':installers:linux:al2:spec', configuration: 'archives')
}

// The Docker image is built in a directory that contains
// the source tarball and the spec file.
// The following two tasks create this directory structure:
//  buildRoot
//  ├── Dockerfile
//  └── rpmbuild
//      └── java-11-amazon-corretto.spec
//      └── SOURCES
//          └── amazon-corretto-source-11.0.2.7.1.tar.gz
task createRpmBuildRoot(type: Copy) {
    dependsOn project.configurations.compile
    from (project.configurations.compile.singleFile) {
        into 'SOURCES'
    }
    from(tarTree(project.configurations.compile.singleFile)) {
        include "**/java-11-amazon-corretto.spec"
        eachFile { f -> f.path = f.name }
    }
    includeEmptyDirs = false
    into "$buildRoot/rpmbuild"
}

task copyDockerFile(type: Copy) {
    from 'Dockerfile'
    from 'post-install-test.sh'
    into buildRoot
}

task buildRpmsWithDocker(type: DockerBuildImage) {
    dependsOn copyDockerFile, createRpmBuildRoot
    inputDir = buildRoot
}

task createMyAppContainer(type: DockerCreateContainer) {
    dependsOn buildRpmsWithDocker
    targetImageId buildRpmsWithDocker.getImageId()
    autoRemove = true
}

// There's a bmuschko task that *should* work for this (DockerCopyFileFromContainer),
// but the socket dies before the entire file is copied.
task copyRpmsFromContainer(type: Exec) {
    dependsOn createMyAppContainer
    commandLine 'docker', 'cp',
            "${-> createMyAppContainer.getContainerId().get()}:/rpmbuild/RPMS/x86_64",
            "$buildDir/distributions"
}

build.dependsOn buildRpmsWithDocker
